/*
 * generated by Xtext 2.31.0
 */
grammar InternalMachineDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package statemachine.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package statemachine.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import statemachine.dsl.services.MachineDslGrammarAccess;

}
@parser::members {
	private MachineDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MachineDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMachine
entryRuleMachine
:
{ before(grammarAccess.getMachineRule()); }
	 ruleMachine
{ after(grammarAccess.getMachineRule()); } 
	 EOF 
;

// Rule Machine
ruleMachine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMachineAccess().getGroup()); }
		(rule__Machine__Group__0)
		{ after(grammarAccess.getMachineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventHandler
entryRuleEventHandler
:
{ before(grammarAccess.getEventHandlerRule()); }
	 ruleEventHandler
{ after(grammarAccess.getEventHandlerRule()); } 
	 EOF 
;

// Rule EventHandler
ruleEventHandler 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventHandlerAccess().getGroup()); }
		(rule__EventHandler__Group__0)
		{ after(grammarAccess.getEventHandlerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncrementCounter
entryRuleIncrementCounter
:
{ before(grammarAccess.getIncrementCounterRule()); }
	 ruleIncrementCounter
{ after(grammarAccess.getIncrementCounterRule()); } 
	 EOF 
;

// Rule IncrementCounter
ruleIncrementCounter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncrementCounterAccess().getGroup()); }
		(rule__IncrementCounter__Group__0)
		{ after(grammarAccess.getIncrementCounterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCounter
entryRuleCounter
:
{ before(grammarAccess.getCounterRule()); }
	 ruleCounter
{ after(grammarAccess.getCounterRule()); } 
	 EOF 
;

// Rule Counter
ruleCounter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCounterAccess().getGroup()); }
		(rule__Counter__Group__0)
		{ after(grammarAccess.getCounterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintStatement
entryRulePrintStatement
:
{ before(grammarAccess.getPrintStatementRule()); }
	 rulePrintStatement
{ after(grammarAccess.getPrintStatementRule()); } 
	 EOF 
;

// Rule PrintStatement
rulePrintStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintStatementAccess().getGroup()); }
		(rule__PrintStatement__Group__0)
		{ after(grammarAccess.getPrintStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintCounter
entryRulePrintCounter
:
{ before(grammarAccess.getPrintCounterRule()); }
	 rulePrintCounter
{ after(grammarAccess.getPrintCounterRule()); } 
	 EOF 
;

// Rule PrintCounter
rulePrintCounter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintCounterAccess().getGroup()); }
		(rule__PrintCounter__Group__0)
		{ after(grammarAccess.getPrintCounterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJumpStatement
entryRuleJumpStatement
:
{ before(grammarAccess.getJumpStatementRule()); }
	 ruleJumpStatement
{ after(grammarAccess.getJumpStatementRule()); } 
	 EOF 
;

// Rule JumpStatement
ruleJumpStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJumpStatementAccess().getGroup()); }
		(rule__JumpStatement__Group__0)
		{ after(grammarAccess.getJumpStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule NormalEventHandlerKind
ruleNormalEventHandlerKind
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNormalEventHandlerKindAccess().getNORMALEnumLiteralDeclaration()); }
		('event')
		{ after(grammarAccess.getNormalEventHandlerKindAccess().getNORMALEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EntryEventHandlerKind
ruleEntryEventHandlerKind
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntryEventHandlerKindAccess().getENTRYEnumLiteralDeclaration()); }
		('entry')
		{ after(grammarAccess.getEntryEventHandlerKindAccess().getENTRYEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ExitEventHandlerKind
ruleExitEventHandlerKind
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExitEventHandlerKindAccess().getEXITEnumLiteralDeclaration()); }
		('exit')
		{ after(grammarAccess.getExitEventHandlerKindAccess().getEXITEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__KindAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getKindNormalEventHandlerKindEnumRuleCall_0_0_0()); }
		ruleNormalEventHandlerKind
		{ after(grammarAccess.getEventHandlerAccess().getKindNormalEventHandlerKindEnumRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventHandlerAccess().getKindEntryEventHandlerKindEnumRuleCall_0_0_1()); }
		ruleEntryEventHandlerKind
		{ after(grammarAccess.getEventHandlerAccess().getKindEntryEventHandlerKindEnumRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEventHandlerAccess().getKindExitEventHandlerKindEnumRuleCall_0_0_2()); }
		ruleExitEventHandlerKind
		{ after(grammarAccess.getEventHandlerAccess().getKindExitEventHandlerKindEnumRuleCall_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrintStatementParserRuleCall_0()); }
		rulePrintStatement
		{ after(grammarAccess.getStatementAccess().getPrintStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_1()); }
		ruleJumpStatement
		{ after(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintCounterParserRuleCall_2()); }
		rulePrintCounter
		{ after(grammarAccess.getStatementAccess().getPrintCounterParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIncrementCounterParserRuleCall_3()); }
		ruleIncrementCounter
		{ after(grammarAccess.getStatementAccess().getIncrementCounterParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__0__Impl
	rule__Machine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getMachineKeyword_0()); }
	'machine'
	{ after(grammarAccess.getMachineAccess().getMachineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__1__Impl
	rule__Machine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getNameAssignment_1()); }
	(rule__Machine__NameAssignment_1)
	{ after(grammarAccess.getMachineAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__2__Impl
	rule__Machine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__3__Impl
	rule__Machine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getCounterAssignment_3()); }
	(rule__Machine__CounterAssignment_3)?
	{ after(grammarAccess.getMachineAccess().getCounterAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__4__Impl
	rule__Machine__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getStatesAssignment_4()); }
	(rule__Machine__StatesAssignment_4)*
	{ after(grammarAccess.getMachineAccess().getStatesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getInitialAssignment_0()); }
	(rule__State__InitialAssignment_0)?
	{ after(grammarAccess.getStateAccess().getInitialAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateKeyword_1()); }
	'state'
	{ after(grammarAccess.getStateAccess().getStateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_2()); }
	(rule__State__NameAssignment_2)
	{ after(grammarAccess.getStateAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getHandlersAssignment_4()); }
	(rule__State__HandlersAssignment_4)*
	{ after(grammarAccess.getStateAccess().getHandlersAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventHandler__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__0__Impl
	rule__EventHandler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getKindAssignment_0()); }
	(rule__EventHandler__KindAssignment_0)
	{ after(grammarAccess.getEventHandlerAccess().getKindAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__1__Impl
	rule__EventHandler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getNameAssignment_1()); }
	(rule__EventHandler__NameAssignment_1)?
	{ after(grammarAccess.getEventHandlerAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__2__Impl
	rule__EventHandler__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getEventHandlerAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__3__Impl
	rule__EventHandler__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getStatementsAssignment_3()); }
	(rule__EventHandler__StatementsAssignment_3)*
	{ after(grammarAccess.getEventHandlerAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getEventHandlerAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IncrementCounter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncrementCounter__Group__0__Impl
	rule__IncrementCounter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementCounter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementCounterAccess().getPlusSignPlusSignKeyword_0()); }
	'++'
	{ after(grammarAccess.getIncrementCounterAccess().getPlusSignPlusSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementCounter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncrementCounter__Group__1__Impl
	rule__IncrementCounter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementCounter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementCounterAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getIncrementCounterAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementCounter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncrementCounter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementCounter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementCounterAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getIncrementCounterAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Counter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Counter__Group__0__Impl
	rule__Counter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCounterAccess().getIntKeyword_0()); }
	'int'
	{ after(grammarAccess.getCounterAccess().getIntKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Counter__Group__1__Impl
	rule__Counter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCounterAccess().getNameAssignment_1()); }
	(rule__Counter__NameAssignment_1)
	{ after(grammarAccess.getCounterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Counter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCounterAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getCounterAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintStatement__Group__0__Impl
	rule__PrintStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintStatementAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getPrintStatementAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintStatement__Group__1__Impl
	rule__PrintStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintStatementAccess().getTextAssignment_1()); }
	(rule__PrintStatement__TextAssignment_1)
	{ after(grammarAccess.getPrintStatementAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getPrintStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCounter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__0__Impl
	rule__PrintCounter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getPrintCounterAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__1__Impl
	rule__PrintCounter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getTextAssignment_1()); }
	(rule__PrintCounter__TextAssignment_1)
	{ after(grammarAccess.getPrintCounterAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__2__Impl
	rule__PrintCounter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getPrintCounterAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__3__Impl
	rule__PrintCounter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getValueAssignment_3()); }
	(rule__PrintCounter__ValueAssignment_3)
	{ after(grammarAccess.getPrintCounterAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__4__Impl
	rule__PrintCounter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getPrintCounterAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__5__Impl
	rule__PrintCounter__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getText2Assignment_5()); }
	(rule__PrintCounter__Text2Assignment_5)
	{ after(grammarAccess.getPrintCounterAccess().getText2Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCounter__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCounterAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getPrintCounterAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JumpStatement__Group__0__Impl
	rule__JumpStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJumpStatementAccess().getJumpKeyword_0()); }
	'jump'
	{ after(grammarAccess.getJumpStatementAccess().getJumpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JumpStatement__Group__1__Impl
	rule__JumpStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJumpStatementAccess().getTargetAssignment_1()); }
	(rule__JumpStatement__TargetAssignment_1)
	{ after(grammarAccess.getJumpStatementAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JumpStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__CounterAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getCounterCounterParserRuleCall_3_0()); }
		ruleCounter
		{ after(grammarAccess.getMachineAccess().getCounterCounterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__StatesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getStatesStateParserRuleCall_4_0()); }
		ruleState
		{ after(grammarAccess.getMachineAccess().getStatesStateParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__InitialAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
		(
			{ before(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
			'initial'
			{ after(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
		)
		{ after(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__HandlersAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getHandlersEventHandlerParserRuleCall_4_0()); }
		ruleEventHandler
		{ after(grammarAccess.getStateAccess().getHandlersEventHandlerParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__KindAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getKindAlternatives_0_0()); }
		(rule__EventHandler__KindAlternatives_0_0)
		{ after(grammarAccess.getEventHandlerAccess().getKindAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEventHandlerAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getEventHandlerAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCounterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCounterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintStatementAccess().getTextSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPrintStatementAccess().getTextSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintCounterAccess().getTextSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPrintCounterAccess().getTextSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintCounterAccess().getValueIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getPrintCounterAccess().getValueIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCounter__Text2Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintCounterAccess().getText2STRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getPrintCounterAccess().getText2STRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJumpStatementAccess().getTargetStateCrossReference_1_0()); }
		(
			{ before(grammarAccess.getJumpStatementAccess().getTargetStateIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getJumpStatementAccess().getTargetStateIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getJumpStatementAccess().getTargetStateCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
