/*
 * generated by Xtext 2.31.0
 */
grammar InternalMachineDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package statemachine.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package statemachine.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import statemachine.dsl.services.MachineDslGrammarAccess;

}

@parser::members {

 	private MachineDslGrammarAccess grammarAccess;

    public InternalMachineDslParser(TokenStream input, MachineDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Machine";
   	}

   	@Override
   	protected MachineDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	iv_ruleMachine=ruleMachine
	{ $current=$iv_ruleMachine.current; }
	EOF;

// Rule Machine
ruleMachine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='machine'
		{
			newLeafNode(otherlv_0, grammarAccess.getMachineAccess().getMachineKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMachineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMachineAccess().getCounterCounterParserRuleCall_3_0());
				}
				lv_counter_3_0=ruleCounter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMachineRule());
					}
					set(
						$current,
						"counter",
						lv_counter_3_0,
						"statemachine.dsl.MachineDsl.Counter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMachineAccess().getStatesStateParserRuleCall_4_0());
				}
				lv_states_4_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMachineRule());
					}
					add(
						$current,
						"states",
						lv_states_4_0,
						"statemachine.dsl.MachineDsl.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_initial_0_0='initial'
				{
					newLeafNode(lv_initial_0_0, grammarAccess.getStateAccess().getInitialInitialKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed($current, "initial", lv_initial_0_0 != null, "initial");
				}
			)
		)?
		otherlv_1='state'
		{
			newLeafNode(otherlv_1, grammarAccess.getStateAccess().getStateKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getHandlersEventHandlerParserRuleCall_4_0());
				}
				lv_handlers_4_0=ruleEventHandler
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"handlers",
						lv_handlers_4_0,
						"statemachine.dsl.MachineDsl.EventHandler");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEventHandler
entryRuleEventHandler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventHandlerRule()); }
	iv_ruleEventHandler=ruleEventHandler
	{ $current=$iv_ruleEventHandler.current; }
	EOF;

// Rule EventHandler
ruleEventHandler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEventHandlerAccess().getKindNormalEventHandlerKindEnumRuleCall_0_0_0());
					}
					lv_kind_0_1=ruleNormalEventHandlerKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
						}
						set(
							$current,
							"kind",
							lv_kind_0_1,
							"statemachine.dsl.MachineDsl.NormalEventHandlerKind");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getEventHandlerAccess().getKindEntryEventHandlerKindEnumRuleCall_0_0_1());
					}
					lv_kind_0_2=ruleEntryEventHandlerKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
						}
						set(
							$current,
							"kind",
							lv_kind_0_2,
							"statemachine.dsl.MachineDsl.EntryEventHandlerKind");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getEventHandlerAccess().getKindExitEventHandlerKindEnumRuleCall_0_0_2());
					}
					lv_kind_0_3=ruleExitEventHandlerKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
						}
						set(
							$current,
							"kind",
							lv_kind_0_3,
							"statemachine.dsl.MachineDsl.ExitEventHandlerKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventHandlerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventHandlerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEventHandlerAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventHandlerAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"statemachine.dsl.MachineDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEventHandlerAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintStatementParserRuleCall_0());
		}
		this_PrintStatement_0=rulePrintStatement
		{
			$current = $this_PrintStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_1());
		}
		this_JumpStatement_1=ruleJumpStatement
		{
			$current = $this_JumpStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintCounterParserRuleCall_2());
		}
		this_PrintCounter_2=rulePrintCounter
		{
			$current = $this_PrintCounter_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIncrementCounterParserRuleCall_3());
		}
		ruleIncrementCounter
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIncrementCounter
entryRuleIncrementCounter returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncrementCounterRule()); }
	iv_ruleIncrementCounter=ruleIncrementCounter
	{ $current=$iv_ruleIncrementCounter.current.getText(); }
	EOF;

// Rule IncrementCounter
ruleIncrementCounter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIncrementCounterAccess().getPlusSignPlusSignKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getIncrementCounterAccess().getIDTerminalRuleCall_1());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIncrementCounterAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleCounter
entryRuleCounter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCounterRule()); }
	iv_ruleCounter=ruleCounter
	{ $current=$iv_ruleCounter.current; }
	EOF;

// Rule Counter
ruleCounter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='int'
		{
			newLeafNode(otherlv_0, grammarAccess.getCounterAccess().getIntKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCounterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCounterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getCounterAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulePrintStatement
entryRulePrintStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintStatementRule()); }
	iv_rulePrintStatement=rulePrintStatement
	{ $current=$iv_rulePrintStatement.current; }
	EOF;

// Rule PrintStatement
rulePrintStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintStatementAccess().getPrintKeyword_0());
		}
		(
			(
				lv_text_1_0=RULE_STRING
				{
					newLeafNode(lv_text_1_0, grammarAccess.getPrintStatementAccess().getTextSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintStatementRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulePrintCounter
entryRulePrintCounter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintCounterRule()); }
	iv_rulePrintCounter=rulePrintCounter
	{ $current=$iv_rulePrintCounter.current; }
	EOF;

// Rule PrintCounter
rulePrintCounter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintCounterAccess().getPrintKeyword_0());
		}
		(
			(
				lv_text_1_0=RULE_STRING
				{
					newLeafNode(lv_text_1_0, grammarAccess.getPrintCounterAccess().getTextSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintCounterRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintCounterAccess().getCommaKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_ID
				{
					newLeafNode(lv_value_3_0, grammarAccess.getPrintCounterAccess().getValueIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintCounterRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getPrintCounterAccess().getCommaKeyword_4());
		}
		(
			(
				lv_text2_5_0=RULE_STRING
				{
					newLeafNode(lv_text2_5_0, grammarAccess.getPrintCounterAccess().getText2STRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintCounterRule());
					}
					setWithLastConsumed(
						$current,
						"text2",
						lv_text2_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getPrintCounterAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleJumpStatement
entryRuleJumpStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJumpStatementRule()); }
	iv_ruleJumpStatement=ruleJumpStatement
	{ $current=$iv_ruleJumpStatement.current; }
	EOF;

// Rule JumpStatement
ruleJumpStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='jump'
		{
			newLeafNode(otherlv_0, grammarAccess.getJumpStatementAccess().getJumpKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJumpStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getJumpStatementAccess().getTargetStateCrossReference_1_0());
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Rule NormalEventHandlerKind
ruleNormalEventHandlerKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='event'
		{
			$current = grammarAccess.getNormalEventHandlerKindAccess().getNORMALEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getNormalEventHandlerKindAccess().getNORMALEnumLiteralDeclaration());
		}
	)
;

// Rule EntryEventHandlerKind
ruleEntryEventHandlerKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='entry'
		{
			$current = grammarAccess.getEntryEventHandlerKindAccess().getENTRYEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getEntryEventHandlerKindAccess().getENTRYEnumLiteralDeclaration());
		}
	)
;

// Rule ExitEventHandlerKind
ruleExitEventHandlerKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='exit'
		{
			$current = grammarAccess.getExitEventHandlerKindAccess().getEXITEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getExitEventHandlerKindAccess().getEXITEnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
