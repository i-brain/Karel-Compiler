/*
 * generated by Xtext 2.31.0
 */
package statemachine.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MachineDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCounterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCounterCounterParserRuleCall_3_0 = (RuleCall)cCounterAssignment_3.eContents().get(0);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Machine: 'machine' name=ID '{' counter=Counter? (states +=State)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=ID '{' counter=Counter? (states +=State)* '}'
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//counter=Counter?
		public Assignment getCounterAssignment_3() { return cCounterAssignment_3; }
		
		//Counter
		public RuleCall getCounterCounterParserRuleCall_3_0() { return cCounterCounterParserRuleCall_3_0; }
		
		//(states +=State)*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHandlersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHandlersEventHandlerParserRuleCall_4_0 = (RuleCall)cHandlersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State: initial?='initial'? 'state' name=ID '{' handlers+=EventHandler* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//initial?='initial'? 'state' name=ID '{' handlers+=EventHandler* '}'
		public Group getGroup() { return cGroup; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//handlers+=EventHandler*
		public Assignment getHandlersAssignment_4() { return cHandlersAssignment_4; }
		
		//EventHandler
		public RuleCall getHandlersEventHandlerParserRuleCall_4_0() { return cHandlersEventHandlerParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EventHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.EventHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKindAlternatives_0_0 = (Alternatives)cKindAssignment_0.eContents().get(0);
		private final RuleCall cKindNormalEventHandlerKindEnumRuleCall_0_0_0 = (RuleCall)cKindAlternatives_0_0.eContents().get(0);
		private final RuleCall cKindEntryEventHandlerKindEnumRuleCall_0_0_1 = (RuleCall)cKindAlternatives_0_0.eContents().get(1);
		private final RuleCall cKindExitEventHandlerKindEnumRuleCall_0_0_2 = (RuleCall)cKindAlternatives_0_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventHandler:
		//    kind=(NormalEventHandlerKind|EntryEventHandlerKind|ExitEventHandlerKind)
		//    name=ID? '{' statements+=Statement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=(NormalEventHandlerKind|EntryEventHandlerKind|ExitEventHandlerKind)
		//name=ID? '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//kind=(NormalEventHandlerKind|EntryEventHandlerKind|ExitEventHandlerKind)
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//(NormalEventHandlerKind|EntryEventHandlerKind|ExitEventHandlerKind)
		public Alternatives getKindAlternatives_0_0() { return cKindAlternatives_0_0; }
		
		//NormalEventHandlerKind
		public RuleCall getKindNormalEventHandlerKindEnumRuleCall_0_0_0() { return cKindNormalEventHandlerKindEnumRuleCall_0_0_0; }
		
		//EntryEventHandlerKind
		public RuleCall getKindEntryEventHandlerKindEnumRuleCall_0_0_1() { return cKindEntryEventHandlerKindEnumRuleCall_0_0_1; }
		
		//ExitEventHandlerKind
		public RuleCall getKindExitEventHandlerKindEnumRuleCall_0_0_2() { return cKindExitEventHandlerKindEnumRuleCall_0_0_2; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJumpStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrintCounterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncrementCounterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement: PrintStatement | JumpStatement | PrintCounter | IncrementCounter;
		@Override public ParserRule getRule() { return rule; }
		
		//PrintStatement | JumpStatement | PrintCounter | IncrementCounter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrintStatement
		public RuleCall getPrintStatementParserRuleCall_0() { return cPrintStatementParserRuleCall_0; }
		
		//JumpStatement
		public RuleCall getJumpStatementParserRuleCall_1() { return cJumpStatementParserRuleCall_1; }
		
		//PrintCounter
		public RuleCall getPrintCounterParserRuleCall_2() { return cPrintCounterParserRuleCall_2; }
		
		//IncrementCounter
		public RuleCall getIncrementCounterParserRuleCall_3() { return cIncrementCounterParserRuleCall_3; }
	}
	public class IncrementCounterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.IncrementCounter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IncrementCounter: '++' ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'++' ID ';'
		public Group getGroup() { return cGroup; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CounterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.Counter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Counter: 'int' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'int' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PrintStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.PrintStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PrintStatement: 'print' text = STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' text = STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//text = STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PrintCounterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.PrintCounter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cText2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cText2STRINGTerminalRuleCall_5_0 = (RuleCall)cText2Assignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PrintCounter: 'print' text = STRING ',' value=ID ',' text2 = STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' text = STRING ',' value=ID ',' text2 = STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//text = STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=ID
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_3_0() { return cValueIDTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//text2 = STRING
		public Assignment getText2Assignment_5() { return cText2Assignment_5; }
		
		//STRING
		public RuleCall getText2STRINGTerminalRuleCall_5_0() { return cText2STRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class JumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.JumpStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJumpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetStateCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JumpStatement returns JumpStatement: 'jump' target=[State] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'jump' target=[State] ';'
		public Group getGroup() { return cGroup; }
		
		//'jump'
		public Keyword getJumpKeyword_0() { return cJumpKeyword_0; }
		
		//target=[State]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_1_0() { return cTargetStateCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_1_0_1() { return cTargetStateIDTerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	public class NormalEventHandlerKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.NormalEventHandlerKind");
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNORMALEventKeyword_0 = (Keyword)cNORMALEnumLiteralDeclaration.eContents().get(0);
		
		//enum NormalEventHandlerKind returns EventHandlerKind: NORMAL='event';
		public EnumRule getRule() { return rule; }
		
		//NORMAL='event'
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration() { return cNORMALEnumLiteralDeclaration; }
		
		//'event'
		public Keyword getNORMALEventKeyword_0() { return cNORMALEventKeyword_0; }
	}
	public class EntryEventHandlerKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.EntryEventHandlerKind");
		private final EnumLiteralDeclaration cENTRYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cENTRYEntryKeyword_0 = (Keyword)cENTRYEnumLiteralDeclaration.eContents().get(0);
		
		//enum EntryEventHandlerKind returns EventHandlerKind: ENTRY='entry';
		public EnumRule getRule() { return rule; }
		
		//ENTRY='entry'
		public EnumLiteralDeclaration getENTRYEnumLiteralDeclaration() { return cENTRYEnumLiteralDeclaration; }
		
		//'entry'
		public Keyword getENTRYEntryKeyword_0() { return cENTRYEntryKeyword_0; }
	}
	public class ExitEventHandlerKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "statemachine.dsl.MachineDsl.ExitEventHandlerKind");
		private final EnumLiteralDeclaration cEXITEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cEXITExitKeyword_0 = (Keyword)cEXITEnumLiteralDeclaration.eContents().get(0);
		
		//enum ExitEventHandlerKind returns EventHandlerKind: EXIT='exit';
		public EnumRule getRule() { return rule; }
		
		//EXIT='exit'
		public EnumLiteralDeclaration getEXITEnumLiteralDeclaration() { return cEXITEnumLiteralDeclaration; }
		
		//'exit'
		public Keyword getEXITExitKeyword_0() { return cEXITExitKeyword_0; }
	}
	
	private final MachineElements pMachine;
	private final StateElements pState;
	private final NormalEventHandlerKindElements eNormalEventHandlerKind;
	private final EntryEventHandlerKindElements eEntryEventHandlerKind;
	private final ExitEventHandlerKindElements eExitEventHandlerKind;
	private final EventHandlerElements pEventHandler;
	private final StatementElements pStatement;
	private final IncrementCounterElements pIncrementCounter;
	private final CounterElements pCounter;
	private final PrintStatementElements pPrintStatement;
	private final PrintCounterElements pPrintCounter;
	private final JumpStatementElements pJumpStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MachineDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMachine = new MachineElements();
		this.pState = new StateElements();
		this.eNormalEventHandlerKind = new NormalEventHandlerKindElements();
		this.eEntryEventHandlerKind = new EntryEventHandlerKindElements();
		this.eExitEventHandlerKind = new ExitEventHandlerKindElements();
		this.pEventHandler = new EventHandlerElements();
		this.pStatement = new StatementElements();
		this.pIncrementCounter = new IncrementCounterElements();
		this.pCounter = new CounterElements();
		this.pPrintStatement = new PrintStatementElements();
		this.pPrintCounter = new PrintCounterElements();
		this.pJumpStatement = new JumpStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("statemachine.dsl.MachineDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Machine: 'machine' name=ID '{' counter=Counter? (states +=State)* '}';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//State: initial?='initial'? 'state' name=ID '{' handlers+=EventHandler* '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//enum NormalEventHandlerKind returns EventHandlerKind: NORMAL='event';
	public NormalEventHandlerKindElements getNormalEventHandlerKindAccess() {
		return eNormalEventHandlerKind;
	}
	
	public EnumRule getNormalEventHandlerKindRule() {
		return getNormalEventHandlerKindAccess().getRule();
	}
	
	//enum EntryEventHandlerKind returns EventHandlerKind: ENTRY='entry';
	public EntryEventHandlerKindElements getEntryEventHandlerKindAccess() {
		return eEntryEventHandlerKind;
	}
	
	public EnumRule getEntryEventHandlerKindRule() {
		return getEntryEventHandlerKindAccess().getRule();
	}
	
	//enum ExitEventHandlerKind returns EventHandlerKind: EXIT='exit';
	public ExitEventHandlerKindElements getExitEventHandlerKindAccess() {
		return eExitEventHandlerKind;
	}
	
	public EnumRule getExitEventHandlerKindRule() {
		return getExitEventHandlerKindAccess().getRule();
	}
	
	//EventHandler:
	//    kind=(NormalEventHandlerKind|EntryEventHandlerKind|ExitEventHandlerKind)
	//    name=ID? '{' statements+=Statement* '}'
	//;
	public EventHandlerElements getEventHandlerAccess() {
		return pEventHandler;
	}
	
	public ParserRule getEventHandlerRule() {
		return getEventHandlerAccess().getRule();
	}
	
	//Statement: PrintStatement | JumpStatement | PrintCounter | IncrementCounter;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//IncrementCounter: '++' ID ';';
	public IncrementCounterElements getIncrementCounterAccess() {
		return pIncrementCounter;
	}
	
	public ParserRule getIncrementCounterRule() {
		return getIncrementCounterAccess().getRule();
	}
	
	//Counter: 'int' name=ID ';';
	public CounterElements getCounterAccess() {
		return pCounter;
	}
	
	public ParserRule getCounterRule() {
		return getCounterAccess().getRule();
	}
	
	//PrintStatement: 'print' text = STRING ';';
	public PrintStatementElements getPrintStatementAccess() {
		return pPrintStatement;
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//PrintCounter: 'print' text = STRING ',' value=ID ',' text2 = STRING ';';
	public PrintCounterElements getPrintCounterAccess() {
		return pPrintCounter;
	}
	
	public ParserRule getPrintCounterRule() {
		return getPrintCounterAccess().getRule();
	}
	
	//JumpStatement returns JumpStatement: 'jump' target=[State] ';';
	public JumpStatementElements getJumpStatementAccess() {
		return pJumpStatement;
	}
	
	public ParserRule getJumpStatementRule() {
		return getJumpStatementAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
